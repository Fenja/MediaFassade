// Generated by CoffeeScript 1.9.3

/*

The compiled custom_body.js will be included at the end of the html body section after the include of socket.io and stk-framework.
Define your functions here.
 */

(function() {
  var bottom, calcSide, checkCollision, checkCollisions, clear, collect, customLogger, customLoggerD, customLoggerT, directionJoystick, directionKey, draggable_joystick_handler, draggable_keylistener_handler, fallCount, fallRound, falls, fps, getPlayer, gravity, heaven, jump, jumpHeight, object0, object1, objectDown, objectList, objectWidth, player1, player2, playerHeight, playerWidth, players, queue, readyAndGo, running, tollerance, update, updateObjects, updatePlayer, updatePlayers, viewportHeight, viewportWidth;

  customLogger = function(s) {
    return console.log(s);
  };

  customLoggerT = function() {

    /*customLogger "Timer" */
    update();
    return clear();
  };

  customLoggerD = function() {

    /*customLogger "Delay" */
    return stk.framework.timer(100, customLoggerT);
  };

  stk.framework.delay(500, customLoggerD);


  /* Define your handler */

  draggable_keylistener_handler = function(msg) {
    directionKey(msg);
    return console.log('Do something with msg: ' + JSON.stringify(msg));
  };

  draggable_joystick_handler = function(msg) {
    directionJoystick(msg);
    return console.log('Do something with msg: ' + JSON.stringify(msg));
  };


  /* Register your handler */

  stk.framework.register_handler('draggable_joystick', draggable_joystick_handler);

  stk.framework.register_handler('draggable_keylistener', draggable_keylistener_handler);


  /*
  Doing "onLoad"-Stuff
  If you want a function be called after the last script (it is this script - custom_end.coffee/custom_end.js) is loaded, add your code here.
  If it should be executed after the "loading..." animation ends, add a delay call of 1200 ms
   */

  console.log("ready");

  readyAndGo = function() {
    return console.log("go");
  };

  stk.framework.delay(1200, readyAndGo);


  /* own code */

  viewportHeight = window.innerHeight;

  viewportWidth = window.innerWidth;

  fps = 50;

  running = true;

  tollerance = 5;

  bottom = 250;

  jumpHeight = 300;

  player1 = {
    up: false,
    left: false,
    right: false,
    jumps: false,
    falls: false,
    height: bottom,
    side: 50,
    dom: document.getElementById('player0'),
    score: 0
  };

  player2 = {
    up: false,
    left: false,
    right: false,
    jumps: false,
    falls: false,
    height: bottom,
    side: 250,
    dom: document.getElementById('player1'),
    score: 0
  };

  players = [player1, player2];

  playerWidth = parseInt(getComputedStyle(player1.dom).width);

  playerHeight = parseInt(getComputedStyle(player1.dom).height);

  gravity = 5;

  heaven = viewportHeight;

  object0 = {
    value: 0,
    name: 'zero',
    height: 1000,
    velo: 5,
    side: 10,
    dom: document.getElementById('zero')
  };

  object1 = {
    value: 1,
    name: 'one',
    height: 1000,
    velo: 5,
    side: 40,
    dom: document.getElementById('one')
  };


  /*object2 = 
    value: 2
    name: 'two'
    height: heaven
    velo: gravity
    dom: document.getElementById(name)
    
  objectBomb =
    value: 0
    name: 'bomb'
    height: heaven
    velo: gravity
    dom: document.getElementById(name)
  
  objectPower = 
    value: 0
    name: "power"
    height: heaven
    velo: gravity
    dom: document.getElementById(name)
   */

  objectWidth = parseInt(getComputedStyle(object1.dom).width);

  objectList = [object0];

  queue = [object1];

  fallCount = 0;

  fallRound = 30;


  /* Own methods */

  getPlayer = function(emailhash) {
    return player1;
  };

  directionJoystick = function(msg, player) {
    var type, x, y;
    player = getPlayer(msg.envelop.emailhash);
    x = msg.x;
    y = msg.y;
    type = msg.type;
    if (y < 0.4 && y < x - 0.1) {
      player.up = true;
    } else if (x < 0.4 && x < y - 0.1) {
      player.left = true;
    } else if (x > 0.6 && x > y + 0.1) {
      player.right = true;
    }
    return true;
  };

  directionKey = function(msg, player) {
    var code, i, keys, len;
    player = getPlayer(msg.envelop.emailhash);
    keys = msg.keys;
    for (i = 0, len = keys.length; i < len; i++) {
      code = keys[i];
      if (code === 37) {
        player.left = true;
      }
      if (code === 38) {
        player.up = true;
      }
      if (code === 39) {
        player.right = true;
      }
    }
    return true;
  };

  update = function() {
    updatePlayers();
    updateObjects();
    return checkCollisions();
  };

  updatePlayers = function() {
    var i, len, player;
    for (i = 0, len = players.length; i < len; i++) {
      player = players[i];
      updatePlayer(player);
    }
    return true;
  };

  updatePlayer = function(player) {
    if (player.left && player.side > 0) {
      player.side -= 10;
    } else if (player.right && player.side + playerWidth < viewportWidth) {
      player.side += 10;
    }
    if (player.jumps || player.falls) {
      jump(player);
    } else if (player.up) {
      jump(player);
    }
    player.dom.style.left = player.side + "px";
    return true;
  };

  jump = function(player) {
    if (player.height <= bottom) {
      player.jumps = true;
    } else if (player.height >= jumpHeight + bottom) {
      player.jumps = false;
      player.falls = true;
    }
    if (player.jumps) {
      player.height += 10;
    } else if (player.falls) {
      player.height -= 10;
      if (player.height <= bottom) {
        player.falls = false;
      }
    }
    player.dom.style.bottom = player.height + "px";
    return true;
  };

  updateObjects = function() {
    var i, len, object;
    for (i = 0, len = objectList.length; i < len; i++) {
      object = objectList[i];
      falls(object);
    }
    if (queue.length > 0) {
      fallCount += 1;
      if (fallCount >= fallRound && Math.floor(Math.random() * 3) >= 2) {
        objectList[objectList.length] = queue[0];
        queue.splice(0);
        fallCount = 0;
      }
    }
    return true;
  };

  falls = function(object) {
    object.height -= object.velo;
    if (object.height <= 0) {
      objectDown(object);
    }
    object.dom.style.bottom = object.height + "px";
    return true;
  };

  checkCollisions = function() {
    var i, len, object;
    for (i = 0, len = objectList.length; i < len; i++) {
      object = objectList[i];
      checkCollision(object);
    }
    return true;
  };

  checkCollision = function(object) {
    var i, len, player;
    for (i = 0, len = players.length; i < len; i++) {
      player = players[i];
      if ((player.height + playerHeight) >= (object.height + tollerance) && player.side + tollerance <= object.side && (player.side + playerWidth) >= (object.side + objectWidth + tollerance)) {
        collect(player, object);
        objectDown(object);
      }
    }
    return true;
  };

  objectDown = function(object) {
    object.height = heaven;
    objectList.remove(object);
    queue[queue.length] = object;
    calcSide(object);
    return true;
  };

  calcSide = function(object) {
    object.dom.style.left = object.side + "px";
    return true;
  };

  collect = function(player, object) {
    player.score += object.value;
    return true;
  };

  clear = function() {
    var i, len, player;
    for (i = 0, len = players.length; i < len; i++) {
      player = players[i];
      player.up = false;
      player.left = false;
      player.right = false;
    }
    return true;
  };

}).call(this);
